#!/bin/bash
#
# USAGE: volume <--volume-up or --volume-down> [application]
# First argument mandatory and changes volume up or down by 4%
# if second argument not given, the selected application is used instead
#


# getting sinkidentities 
sinkidentity=($(pactl list short sink-inputs | awk '{print $1}' | sed 's/:.*//'))

# getting sinkidentities' id
a=($(pactl list sink-inputs | grep 'application.process.id' | awk '{print $3}' | sed 's/:.*//'))

applist=()
for i in "${a[@]}"; do
	applist+=(${i//\"})
done

# getting currentapps
if [[ -n $2 ]]; then
	currentapp=($(ps x | grep $2 | awk '{print $1}'))
else
	currentapp=($(xdotool getwindowfocus getwindowpid))
fi

echo appslist: ${applist[@]}
echo currentapp: ${currentapp[@]}

#current script not meant for anything but --volume-up and --volume-down
if [[ $1 == --volume-up ]]; then
	option=+
elif [[ $1 == --volume-down ]]; then 
	option=-
fi

for a in `seq 0 $(expr ${#applist[@]} - 1)`; do
	
	for b in `seq 0 $(expr ${#currentapp[@]} - 1)`; do
		if [[ ${currentapp[$b]} == ${applist[$a]} ]]; then
			match=1
			echo "Changing volume for pid ${applist[$a]}, app-name: $(ps x | awk '$1 == 12911' | awk '{print $5}')"
			pactl set-sink-input-volume ${sinkidentity[$a]} ${option}4% 	
		fi	
	done
done

if [[ -z $match ]]; then
	echo no match found for $currentapp
fi